{"version":3,"sources":["components/ApiData.jsx","App.js","serviceWorker.js","index.js"],"names":["ApiData","useState","apiData","setApiData","searchValue","setSearchValue","showForm","setShowform","favorite","setFavorite","rawData","filteredData","name","setName","birth_year","setBirthYear","eye_color","setEyeColor","getData","a","apiUrl","hasMorePages","fetch","response","json","next","replace","results","map","obj","push","filterData","filter","item","toLowerCase","includes","addFavorite","model","favoritesData","elements","result","index","className","key","onClick","role","aria-label","favorites","removeFavorite","buttonText","onKeyPress","event","value","onChange","e","target","type","placeholder","htmlFor","required","id","disabled","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+PAiIeA,EA9HC,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACXC,EADW,KACFC,EADE,OAEoBF,mBAAS,IAF7B,mBAEXG,EAFW,KAEEC,EAFF,OAGcJ,oBAAS,GAHvB,mBAGXK,EAHW,KAGDC,EAHC,OAKcN,mBADZ,IAJF,mBAKXO,EALW,KAKDC,EALC,KAMdC,EAAU,GACVC,EAAe,GAPD,EASMV,mBAAS,IATf,mBASXW,EATW,KASLC,EATK,OAUiBZ,mBAAS,IAV1B,mBAUXa,EAVW,KAUCC,EAVD,OAWed,mBAAS,IAXxB,mBAWXe,EAXW,KAWAC,EAXA,cAcHC,IAdG,2EAclB,kCAAAC,EAAA,sDAGQC,EAHR,uCAIQC,GAAe,EAJvB,WAMWA,EANX,iCAO+BC,MAAMF,GAPrC,cAOcG,EAPd,gBAQ2BA,EAASC,OARpC,QAQcA,EARd,QASkBC,OAAMJ,GAAe,GAC3BA,IACAD,EAASI,EAAKC,KAAKC,QAAQ,OAAQ,SACnCF,EAAKG,QAAQC,KAAI,SAACC,GACd,OAAOnB,EAAQoB,KAAKD,OAbpC,uBAiBIE,IAjBJ,6CAdkB,sBAmClB,SAASA,IAQL,OANApB,GADAA,EAAY,UAAOD,IACSsB,QAAO,SAAAC,GAC/B,QAAIA,EAAKrB,KAAKsB,cAAcC,SAAS/B,OAC5B6B,EAAKnB,WAAWoB,cAAcC,SAAS/B,MACvC6B,EAAKjB,UAAUkB,cAAcC,SAAS/B,OAG5CD,EAAWQ,GAOtB,SAASyB,EAAYH,GACjB,IAAII,EAAQ,CACRzB,KAAMqB,EAAKrB,KACXE,WAAYmB,EAAKnB,WACjBE,UAAWiB,EAAKjB,WAEpBP,GAAY,SAAA6B,GAAa,4BAAQA,GAAR,CAAuBD,OAapD,IACME,EAAWrC,EAAQ0B,KAAI,SAACY,EAAQC,GAClC,OACI,yBAAKC,UAAU,mBAAmBC,IAAKH,EAAO5B,KAAO6B,GACjD,uBAAGC,UAAU,QAAQF,EAAO5B,MAC5B,0BAAMgC,QAAS,kBAAMR,EAAYI,IAASK,KAAK,MAAMC,aAAW,kBAAkBJ,UAAU,wBALzF,UAOH,uBAAGA,UAAU,aAAb,cAAoC,8BAAOF,EAAOxB,YAClD,uBAAG0B,UAAU,cAAb,eAAsC,8BAAOF,EAAO1B,iBAK1DiC,EAAYvC,EAASoB,KAAI,SAACK,GAC5B,OACI,yBAAKS,UAAU,mBAAmBC,IAAKV,EAAKrB,MACxC,uBAAG8B,UAAU,QAAQT,EAAKrB,MAC1B,0BAAMgC,QAAS,kBA5B3B,SAAwBX,GACpBxB,EAAYD,EAASwB,QAAO,SAAAxB,GAAQ,OAAIA,EAASI,OAASqB,EAAKrB,SA2BlCoC,CAAef,IAAOY,KAAK,MAAMC,aAAW,kBAAkBJ,UAAU,wBAA7F,UAEA,uBAAGA,UAAU,aAAb,cAAoC,8BAAOT,EAAKjB,YAChD,uBAAG0B,UAAU,cAAb,eAAsC,8BAAOT,EAAKnB,iBAK1DmC,EAAa,mBAIjB,OAHI3C,IACA2C,EAAa,gBAGb,yBAAKP,UAAU,cACX,2BAAOQ,WAvDf,SAAyBC,GACH,UAAdA,EAAMR,KACNzB,KAqDoCkC,MAAOhD,EAAaiD,SAAU,SAAAC,GAAC,OAAIjD,EAAeiD,EAAEC,OAAOH,MAAMlB,gBAAgBsB,KAAK,OAAOC,YAAY,sCAC7I,4BAAQb,QAAS1B,GAAjB,UACA,4BAAQ0B,QAAS,kBAAMrC,GAAaD,KAAa2C,GAChD3C,EACG,6BACI,sDACA,yBAAKoC,UAAU,kBACX,2BAAOgB,QAAQ,QAAf,SAA4B,6BAAM,2BAAOC,UAAQ,EAACC,GAAG,OAAOJ,KAAK,OAAOH,SAAU,SAAAC,GAAC,OAAIzC,EAAQyC,EAAEC,OAAOH,WACxG,2BAAOM,QAAQ,SAAf,eAAmC,6BAAM,2BAAOC,UAAQ,EAACC,GAAG,QAAQJ,KAAK,OAAOH,SAAU,SAAAC,GAAC,OAAIvC,EAAauC,EAAEC,OAAOH,WACrH,2BAAOM,QAAQ,OAAf,cAAgC,6BAAM,2BAAOC,UAAQ,EAACC,GAAG,MAAMJ,KAAK,OAAOH,SAAU,SAAAC,GAAC,OAAIrC,EAAYqC,EAAEC,OAAOH,WAC/G,4BAAQR,QAjD5B,WAMIR,EALY,CACRxB,KAAMA,EACNE,WAAYA,EACZE,UAAWA,KA6CiC6C,SAAmB,KAATjD,GAA6B,KAAdI,GAAmC,KAAfF,GAA7E,SAGN,6BACGyB,GAER/B,EAASsD,OAAS,EACf,yBAAKpB,UAAU,aACX,yCACCK,GAEH,OC7GHgB,MAZf,WACE,OACE,yBAAKrB,UAAU,OACb,4BAAQA,UAAU,cAChB,sDAEF,8BACE,kBAAC,EAAD,SCEYsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cec7205c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\n\r\nconst ApiData = () => {\r\n    const [apiData, setApiData] = useState([]);\r\n    const [searchValue, setSearchValue] = useState(\"\");\r\n    const [showForm, setShowform] = useState(false)\r\n    let favoritesData = [];\r\n    const [favorite, setFavorite] = useState(favoritesData)\r\n    let rawData = [];\r\n    let filteredData = [];\r\n\r\n    const [name, setName] = useState(\"\")\r\n    const [birth_year, setBirthYear] = useState(\"\")\r\n    const [eye_color, setEyeColor] = useState(\"\")\r\n\r\n\r\n    async function getData() {\r\n        // let nextUrl = \"1\";\r\n        // let apiUrl = `https://swapi.dev/api/people/?page=${nextUrl}`;\r\n        let apiUrl = `https://swapi.dev/api/people/?page=1`;\r\n        let hasMorePages = true;\r\n\r\n        while (hasMorePages) {\r\n            const response = await fetch(apiUrl);\r\n            const json = await response.json();\r\n            if (!json.next) hasMorePages = false;\r\n            if (hasMorePages) {\r\n                apiUrl = json.next.replace(\"http\", \"https\");\r\n                json.results.map((obj) => {\r\n                    return rawData.push(obj)\r\n                })\r\n            }\r\n        }\r\n        filterData();\r\n    };\r\n\r\n\r\n    function filterData() {\r\n        filteredData = [...rawData];\r\n        filteredData = filteredData.filter(item => {\r\n            if (item.name.toLowerCase().includes(searchValue)) return true;\r\n            else if (item.birth_year.toLowerCase().includes(searchValue)) return true;\r\n            else if (item.eye_color.toLowerCase().includes(searchValue)) return true;\r\n            else return false;\r\n        })\r\n        return setApiData(filteredData);\r\n    };\r\n    function enterKeyPressed(event) {\r\n        if (event.key === \"Enter\") {\r\n            getData();\r\n        }\r\n    }\r\n    function addFavorite(item) {\r\n        let model = {\r\n            name: item.name,\r\n            birth_year: item.birth_year,\r\n            eye_color: item.eye_color\r\n        }\r\n        setFavorite(favoritesData => [...favoritesData, model])\r\n    };\r\n    function removeFavorite(item) {\r\n        setFavorite(favorite.filter(favorite => favorite.name !== item.name))\r\n    }\r\n    function buildFavorite() {\r\n        let model = {\r\n            name: name,\r\n            birth_year: birth_year,\r\n            eye_color: eye_color\r\n        }\r\n        addFavorite(model)\r\n    }\r\n    let spanText = \"⭐\";\r\n    const elements = apiData.map((result, index) => {\r\n        return (\r\n            <div className=\"result-container\" key={result.name + index}>\r\n                <p className=\"name\">{result.name}</p>\r\n                <span onClick={() => addFavorite(result)} role=\"img\" aria-label=\"add as favorite\" className=\"favorite grow active\">{spanText}\r\n                </span>\r\n                <p className=\"eye-color\">Eye color: <span>{result.eye_color}</span></p>\r\n                <p className=\"birth-year\">Birth year: <span>{result.birth_year}</span></p>\r\n            </div >\r\n        )\r\n    })\r\n\r\n    const favorites = favorite.map((item) => {\r\n        return (\r\n            <div className=\"result-container\" key={item.name}>\r\n                <p className=\"name\">{item.name}</p>\r\n                <span onClick={() => removeFavorite(item)} role=\"img\" aria-label=\"add as favorite\" className=\"favorite grow active\">❌\r\n                </span>\r\n                <p className=\"eye-color\">Eye color: <span>{item.eye_color}</span></p>\r\n                <p className=\"birth-year\">Birth year: <span>{item.birth_year}</span></p>\r\n            </div >\r\n        )\r\n    })\r\n\r\n    let buttonText = \"Add own favorite\";\r\n    if (showForm) {\r\n        buttonText = \"Show results\"\r\n    };\r\n    return (\r\n        <div className=\"search-bar\">\r\n            <input onKeyPress={enterKeyPressed} value={searchValue} onChange={e => setSearchValue(e.target.value.toLowerCase())} type=\"text\" placeholder=\"Type a search value e.g Skywalker\" />\r\n            <button onClick={getData}>Search</button>\r\n            <button onClick={() => setShowform(!showForm)} >{buttonText}</button>\r\n            {showForm ?\r\n                <div>\r\n                    <h2>Add your own favorite:</h2>\r\n                    <div className=\"form-container\">\r\n                        <label htmlFor=\"name\">Name: <br /><input required id=\"name\" type=\"text\" onChange={e => setName(e.target.value)} /></label>\r\n                        <label htmlFor=\"birth\">Birth year: <br /><input required id=\"birth\" type=\"text\" onChange={e => setBirthYear(e.target.value)} /></label>\r\n                        <label htmlFor=\"eye\">Eye color: <br /><input required id=\"eye\" type=\"text\" onChange={e => setEyeColor(e.target.value)} /></label>\r\n                        <button onClick={buildFavorite} disabled={name === \"\" || eye_color === \"\" || birth_year === \"\"} >Add</button>\r\n                    </div>\r\n                </div>\r\n                : <div>\r\n                    {elements}\r\n                </div>}\r\n            {favorite.length > 0 ?\r\n                <div className=\"favorites\">\r\n                    <h1>Favorites</h1>\r\n                    {favorites}\r\n                </div>\r\n                : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ApiData;\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport ApiData from \"./components/ApiData\"\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Star wars information</h1>\r\n      </header>\r\n      <main>\r\n        <ApiData />\r\n      </main>\r\n    </div >\r\n  );\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}